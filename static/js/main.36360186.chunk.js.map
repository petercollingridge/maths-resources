{"version":3,"sources":["components/IndexPage.js","components/Grids/TriangularGrid.js","components/Cipher/CipherMapping.js","components/Cipher/Message.js","utils/utils.js","components/Cipher/CipherPage.js","serviceWorker.js","index.js"],"names":["Page","to","checkValidity","callback","evt","target","validity","valid","value","getTile","index","x","y","width","height","className","key","cx","cy","r","deg60","Math","PI","sqrt","d","i","sin","cos","tileShapes","Array","from","Object","keys","useState","gridSize","setGridSize","tileWidth","setTileWidth","tileHeight","setTileHeight","tileShape","setTileShape","gridWidth","gridHeight","tileFunc","tiles","size","positions","j","push","getPositions","map","onChange","shape","type","min","max","onClick","window","print","LetterTable","letters","hiddenLetterState","usedLetters","startIndex","hiddenLetters","setHiddenLetters","letter","has","delete","add","Set","updateHiddenLetters","CipherMapping","plainText","n","floor","length","letters1","slice","letters2","isCodeCharacter","character","isNaN","Word","characters","showLetters","Message","message","setShowLetters","words","currentWord","isBreak","forEach","isCode","splitIntoWords","id","checked","htmlFor","word","shuffle","arr","random","temp","validCharacters","translate","code","indexOf","PlainText","textHidden","setTextHidden","updatePlainText","placeholder","item","setPlainText","setMessage","shuffledLetters","setShuffledLetters","newText","toUpperCase","filter","char","join","cleanText","newLetters","Boolean","location","hostname","match","App","StrictMode","path","component","TriangularGrid","CipherPage","MainPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.36360186.chunk.js","sourcesContent":["/****************************************************************\n * Front page\n*****************************************************************/\n\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nfunction Page() {\n    return (\n        <ul>\n            <li><Link to=\"/triangular-grids\">Grids</Link></li>\n            <li><Link to=\"/cipher\">Ciphers</Link></li>\n        </ul>\n    );\n}\n\nexport default Page;\n","import React, { useState } from 'react';\nimport './grid.css';\n\n\nconst checkValidity = callback =>\n    (evt) => {\n        if (evt.target.validity.valid) {\n            callback(evt.target.value);\n        }\n    }\n\n// Get an array of (x, y) coordinates for the center of tiles in a triangular grid\nconst getPositions = (size, width, tileWidth, tileHeight) => {\n    const positions = [];\n\n    for (let i = 0; i < size; i++) {\n        const y = (i + 0.5) * tileHeight + 1;\n        for (let j = 0; j <= i; j++) {\n            const x = (width - i * tileWidth) / 2 + j * tileWidth + 1;\n            positions.push({x, y});\n        }\n    }\n\n    return positions;\n}\n\n// Functions for drawing tiles of different sizes\nconst getTile = {\n    'Rectangle': (index, x, y, width, height) =>\n        <rect\n            className=\"tile\"\n            key={index}\n            x={x - width / 2}\n            y={y - height / 2}\n            width={width}\n            height={height}\n        />,\n    'Circle': (index, x, y, width) =>\n        <circle\n            className=\"tile\"\n            key={index}\n            cx={x}\n            cy={y}\n            r={width / 2}\n        />,\n    'Hexagon': (index, x, y, width) => {\n        const deg60 = Math.PI / 3;\n        const r = width * Math.sqrt(3) / 3;\n        let d = \"\";\n        for (let i = 0; i < 6; i++) {\n            const px = x + r * Math.sin(i * deg60);\n            const py = y + r * Math.cos(i * deg60);\n            d += (i ? 'L' : 'M') + px + ' ' + py;\n        }\n        return <path className=\"tile\" key={index} d={d + 'z'} />;\n    }\n};\n\n\nconst Page = () => {\n    const tileShapes = Array.from(Object.keys(getTile));\n\n    const [gridSize, setGridSize] = useState(10);\n    const [tileWidth, setTileWidth] = useState(20);\n    const [tileHeight, setTileHeight] = useState(20);\n    const [tileShape, setTileShape] = useState(tileShapes[0]);\n\n    const gridWidth = gridSize * tileWidth;\n    const gridHeight = gridSize * tileHeight;\n\n    const tileFunc = getTile[tileShape];\n    const positions = getPositions(gridSize, gridWidth, tileWidth, tileHeight);\n    const tiles = positions.map(\n        ({x, y}, index) => tileFunc(index, x, y, tileWidth, tileHeight)\n    );\n\n    return <article>\n        <section className=\"options\">\n            <h2>Triangular grid</h2>\n            <form>\n                <label>\n                    Tile shape:\n                    <select value={tileShape} onChange={evt => setTileShape(evt.target.value)}>\n                        {\n                            tileShapes.map(shape => <option key={shape}>{ shape }</option>)\n                        }\n                    </select>\n                </label>\n                <label>\n                    Grid size:\n                    <input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"32\"\n                        value={gridSize}\n                        onChange={checkValidity(setGridSize)}\n                    />\n                </label>\n                <label>\n                    Tile width:\n                    <input\n                        type=\"number\"\n                        min=\"10\"\n                        max=\"100\"\n                        value={tileWidth}\n                        onChange={checkValidity(setTileWidth)}\n                    />\n                </label>\n                <label>\n                    Tile height:\n                    <input\n                        type=\"number\"\n                        min=\"10\"\n                        max=\"100\"\n                        value={tileHeight}\n                        onChange={checkValidity(setTileHeight)}\n                    />\n                </label>\n            </form>\n            <button onClick={window.print}>Print</button>\n        </section>\n\n        <section className=\"image\">\n            <svg className=\"grid\" width={gridWidth + 2} height={gridHeight + 2}>\n                { tiles }\n            </svg>\n        </section>\n    </article>\n}\n\nexport default Page;","/****************************************************************\n * Box showing the mapping/translation between letters and number\n * for the cipher. Has a button to random to randomise the mapping\n * and the option to hide letters.\n*****************************************************************/\n\nimport React, { useState } from 'react';\n\n\nfunction LetterTable({ letters, hiddenLetterState, usedLetters, startIndex=0 }) {\n    const [hiddenLetters, setHiddenLetters] = hiddenLetterState;\n\n    function updateHiddenLetters(letter) {\n        if (hiddenLetters.has(letter)) {\n            hiddenLetters.delete(letter);\n        } else {\n            hiddenLetters.add(letter);\n        }\n        setHiddenLetters(new Set(hiddenLetters));\n    }\n\n    return (\n        <table className=\"cipher-table\">\n            <thead>\n                <tr>\n                    { letters.map((letter) => {\n                        const className = usedLetters.has(letter) ? 'used-letter' : 'unused-letter';\n                        return (\n                            <th key={letter} className={className} onClick={() => updateHiddenLetters(letter)}>\n                                { hiddenLetters.has(letter) ? ' ' : letter }\n                            </th>\n                        );\n                    })}\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    { letters.map((letter, index) => <td key={letter}>{ index + startIndex + 1 }</td>) }\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nfunction CipherMapping({ letters, plainText }) {\n    const hiddenLetterState = useState(new Set());\n    const usedLetters = new Set(plainText);\n\n    const n = Math.floor(letters.length / 2);\n    const letters1 = letters.slice(0, n);\n    const letters2 = letters.slice(n);\n\n    return (\n        <div>\n            <LetterTable letters={letters1} hiddenLetterState={hiddenLetterState} usedLetters={usedLetters} />\n            <LetterTable letters={letters2} hiddenLetterState={hiddenLetterState} usedLetters={usedLetters} startIndex={n} />\n        </div>\n    );\n}\n\nexport default CipherMapping;\n","import React, { useState } from 'react';\n\n\nfunction isCodeCharacter(character) {\n    return character !== ' ' && !isNaN(character);\n}\n\nfunction splitIntoWords(message) {\n    const words = [];\n    let currentWord = [];\n    let isBreak = false;\n    message.forEach(character => {\n        const isCode = isCodeCharacter(character);\n        if (isBreak && isCode) {\n            if (currentWord.length > 0) {\n                words.push(currentWord);\n                currentWord = [];\n                isBreak = false;\n            }\n        }\n        isBreak = !isCode;\n        currentWord.push(character);\n    })\n\n    if (currentWord.length > 0) {\n        words.push(currentWord);\n    }\n\n    return words;\n}\n\nfunction Word({ characters, showLetters, letters }) {\n    return (\n        <span className=\"cipher-word\">\n            { characters.map((character, index) => {\n                if (isCodeCharacter(character)) {\n                    let letter = '';\n                    if (showLetters) {\n                        letter = letters[character - 1];\n                    }\n                    return (\n                        <span key={index} className=\"cipher-character\">\n                            <span className=\"cipher-letter\">\n                                <span className=\"no-print\">{ letter }</span>\n                            </span>\n                            <span>{ character }</span>\n                        </span>\n                    );\n                } else {\n                    return (\n                        <span key={index} className=\"cipher-character\">\n                            <span>{ character }</span>\n                        </span>\n                    );\n                }\n            })}\n        </span>\n    );\n}\n\nfunction Message({ message, letters }) {\n    const [showLetters, setShowLetters] = useState(false);\n    const words = splitIntoWords(message);\n\n    return (\n        <section>\n            <h2>Coded message</h2>\n            <div className=\"no-print\">\n                <input\n                    id=\"show-letters\"\n                    type=\"checkbox\"\n                    checked={showLetters}\n                    onChange={() => setShowLetters(!showLetters)}\n                />\n                <label htmlFor=\"show-letters\"> Show known letters</label>\n            </div>\n            <div className=\"cipher-message\">\n                { words.map((word, index) => (\n                    <Word\n                        key={index}\n                        characters={word}\n                        letters={letters}\n                        showLetters={showLetters}\n                    />\n                ))}\n            </div>\n        </section>\n    );\n}\n\nexport default Message;\n","export function shuffle(arr) {\n    arr = arr.slice(0);\n    for (let i = arr.length; i--; ) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n","import React, { useState } from 'react';\nimport CipherMapping from './CipherMapping';\nimport Message from './Message';\nimport { shuffle } from '../../utils/utils';\n\nimport './cipherStyles.css';\n\nconst letters = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\nconst validCharacters = new Set(letters);\nArray.from(' .?!,()[]:;\"\\'').forEach(item => validCharacters.add(item));\n\n// Convert message to uppercase and strip out invalid characters\nfunction cleanText(message) {\n    message = message.toUpperCase();\n    return Array\n        .from(message)\n        .filter(char => validCharacters.has(char))\n        .join('');\n}\n\nfunction translate(plainText, code) {\n    return Array\n        .from(plainText)\n        .map(character => {\n            const index = code.indexOf(character);\n            return index === -1 ? character : index + 1;\n        });\n}\n\nfunction PlainText({ textHidden, setTextHidden, plainText, updatePlainText }) {\n    if (textHidden) {\n        return (\n            <button onClick={() => (setTextHidden(false))}>\n                Show message\n            </button>\n        );\n    } else {\n        return (\n            <>\n                <h2>Message</h2>\n                <p>\n                    Type your message. (It can't include any numbers.)\n                    <button onClick={() => setTextHidden(!textHidden)}>Hide</button>\n                </p>\n                <textarea\n                    className=\"cipher-message-box\"\n                    value={plainText}\n                    onChange={updatePlainText}\n                    placeholder=\"Type your message\"\n                />\n            </>\n        );\n    }\n}\n\nfunction Page() {\n    const [plainText, setPlainText] = useState('');\n    const [textHidden, setTextHidden] = useState(false);\n    const [message, setMessage] = useState([]);\n    const [shuffledLetters, setShuffledLetters] = useState(shuffle(letters));\n\n    function shuffleLetters() {\n        const newLetters = shuffle(letters);\n        setShuffledLetters(newLetters);\n        setMessage(translate(plainText, newLetters));\n    }\n\n    function updatePlainText(evt) {\n        const newText = cleanText(evt.target.value)\n        setPlainText(newText);\n        setMessage(translate(newText, shuffledLetters));\n    }\n\n    return (\n        <>\n            <section className=\"no-print\">\n                <h2>Introduction</h2>\n                <p>\n                    Type a message in the box below and it will be encoded into numbers\n                    using the code shown. Then hide the message and see if your friend\n                    can decode it. To make things harder you can click on letters in the\n                    code table to hide them.\n                </p>\n\n                <PlainText\n                    textHidden={textHidden}\n                    setTextHidden={setTextHidden}\n                    plainText={plainText}\n                    updatePlainText={updatePlainText}\n                />\n            </section>\n\n            <section>\n                <h2>Code</h2>\n                <div className=\"no-print\">\n                    <button onClick={shuffleLetters}>New code</button>\n                </div>\n                <CipherMapping letters={shuffledLetters} plainText={plainText} />\n            </section>\n\n            <Message message={message} letters={shuffledLetters} />\n        </>\n    );\n}\n\nexport default Page;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport MainPage from './components/IndexPage';\nimport TriangularGrid from './components/Grids/TriangularGrid';\nimport CipherPage from './components/Cipher/CipherPage';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n\nconst App = () =>\n    <React.StrictMode>\n        <header>\n            <h1>Maths Resources</h1>\n        </header>\n\n        <main>\n            <Router>\n                <Switch>\n                    <Route path=\"/triangular-grids\" component={TriangularGrid} />\n                    <Route path=\"/cipher\" component={CipherPage} />\n                    <Route path=\"/\" component={MainPage} />\n                </Switch>\n            </Router>\n        </main>\n    </React.StrictMode>\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}